/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ISemaphoreWhistleblowingInterface extends utils.Interface {
  functions: {
    "addWhistleblower(uint256,uint256)": FunctionFragment;
    "createEntity(uint256,uint256,address,uint8)": FunctionFragment;
    "publishLeak(bytes32,uint256,uint256,bytes,uint256[8])": FunctionFragment;
    "removeWhistleblower(uint256,uint256,uint256[],uint8[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWhistleblower"
      | "createEntity"
      | "publishLeak"
      | "removeWhistleblower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addWhistleblower",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEntity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "publishLeak",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhistleblower",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhistleblower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishLeak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhistleblower",
    data: BytesLike
  ): Result;

  events: {
    "EntityCreated(uint256,address)": EventFragment;
    "LeakPublished(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeakPublished"): EventFragment;
}

export interface EntityCreatedEventObject {
  entityId: BigNumber;
  editor: string;
}
export type EntityCreatedEvent = TypedEvent<
  [BigNumber, string],
  EntityCreatedEventObject
>;

export type EntityCreatedEventFilter = TypedEventFilter<EntityCreatedEvent>;

export interface LeakPublishedEventObject {
  entityId: BigNumber;
  leak: string;
}
export type LeakPublishedEvent = TypedEvent<
  [BigNumber, string],
  LeakPublishedEventObject
>;

export type LeakPublishedEventFilter = TypedEventFilter<LeakPublishedEvent>;

export interface ISemaphoreWhistleblowing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISemaphoreWhistleblowingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addWhistleblower(
    entityId: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEntity(
    entityId: PromiseOrValue<BigNumberish>,
    merkleTreeDepth: PromiseOrValue<BigNumberish>,
    editor: PromiseOrValue<string>,
    maxEdges: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  publishLeak(
    leak: PromiseOrValue<BytesLike>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    entityId: PromiseOrValue<BigNumberish>,
    roots: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhistleblower(
    entityId: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    proofSiblings: PromiseOrValue<BigNumberish>[],
    proofPathIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EntityCreated(uint256,address)"(
      entityId?: null,
      editor?: PromiseOrValue<string> | null
    ): EntityCreatedEventFilter;
    EntityCreated(
      entityId?: null,
      editor?: PromiseOrValue<string> | null
    ): EntityCreatedEventFilter;

    "LeakPublished(uint256,bytes32)"(
      entityId?: PromiseOrValue<BigNumberish> | null,
      leak?: null
    ): LeakPublishedEventFilter;
    LeakPublished(
      entityId?: PromiseOrValue<BigNumberish> | null,
      leak?: null
    ): LeakPublishedEventFilter;
  };

  estimateGas: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
