/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type EdgeStruct = {
  chainID: PromiseOrValue<BigNumberish>;
  root: PromiseOrValue<BigNumberish>;
  latestLeafIndex: PromiseOrValue<BigNumberish>;
  srcResourceID: PromiseOrValue<BytesLike>;
};

export type EdgeStructOutput = [BigNumber, BigNumber, BigNumber, string] & {
  chainID: BigNumber;
  root: BigNumber;
  latestLeafIndex: BigNumber;
  srcResourceID: string;
};

export declare namespace ISemaphoreWhistleblowing {
  export type VerifierStruct = {
    contractAddress: PromiseOrValue<string>;
    merkleTreeDepth: PromiseOrValue<BigNumberish>;
  };

  export type VerifierStructOutput = [string, BigNumber] & {
    contractAddress: string;
    merkleTreeDepth: BigNumber;
  };
}

export interface SemaphoreWhistleblowingInterface extends utils.Interface {
  functions: {
    "addWhistleblower(uint256,uint256)": FunctionFragment;
    "createEntity(uint256,uint256,address,uint8)": FunctionFragment;
    "getLatestNeighborEdges(uint256)": FunctionFragment;
    "getMaxEdges(uint256)": FunctionFragment;
    "getMerkleTreeDepth(uint256)": FunctionFragment;
    "getMerkleTreeRoot(uint256)": FunctionFragment;
    "getNumberOfMerkleTreeLeaves(uint256)": FunctionFragment;
    "publishLeak(bytes32,uint256,uint256,bytes,uint256[8])": FunctionFragment;
    "removeWhistleblower(uint256,uint256,uint256[],uint8[])": FunctionFragment;
    "updateEdge(uint256,uint256,uint32,bytes32)": FunctionFragment;
    "verifyRoots(uint256,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWhistleblower"
      | "createEntity"
      | "getLatestNeighborEdges"
      | "getMaxEdges"
      | "getMerkleTreeDepth"
      | "getMerkleTreeRoot"
      | "getNumberOfMerkleTreeLeaves"
      | "publishLeak"
      | "removeWhistleblower"
      | "updateEdge"
      | "verifyRoots"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addWhistleblower",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createEntity",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestNeighborEdges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxEdges",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleTreeDepth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleTreeRoot",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfMerkleTreeLeaves",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "publishLeak",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhistleblower",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEdge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRoots",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhistleblower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestNeighborEdges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxEdges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfMerkleTreeLeaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishLeak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhistleblower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateEdge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyRoots",
    data: BytesLike
  ): Result;

  events: {
    "EntityCreated(uint256,address)": EventFragment;
    "GroupCreated(uint256,uint256,uint256)": EventFragment;
    "LeakPublished(uint256,bytes32)": EventFragment;
    "MemberAdded(uint256,uint256,uint256,uint256)": EventFragment;
    "MemberRemoved(uint256,uint256,uint256,uint256)": EventFragment;
    "MemberUpdated(uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "NullifierHashAdded(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeakPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NullifierHashAdded"): EventFragment;
}

export interface EntityCreatedEventObject {
  entityId: BigNumber;
  editor: string;
}
export type EntityCreatedEvent = TypedEvent<
  [BigNumber, string],
  EntityCreatedEventObject
>;

export type EntityCreatedEventFilter = TypedEventFilter<EntityCreatedEvent>;

export interface GroupCreatedEventObject {
  groupId: BigNumber;
  merkleTreeDepth: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type GroupCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  GroupCreatedEventObject
>;

export type GroupCreatedEventFilter = TypedEventFilter<GroupCreatedEvent>;

export interface LeakPublishedEventObject {
  entityId: BigNumber;
  leak: string;
}
export type LeakPublishedEvent = TypedEvent<
  [BigNumber, string],
  LeakPublishedEventObject
>;

export type LeakPublishedEventFilter = TypedEventFilter<LeakPublishedEvent>;

export interface MemberAddedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberAddedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MemberAddedEventObject
>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberRemovedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  MemberRemovedEventObject
>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface MemberUpdatedEventObject {
  groupId: BigNumber;
  index: BigNumber;
  identityCommitment: BigNumber;
  newIdentityCommitment: BigNumber;
  merkleTreeRoot: BigNumber;
}
export type MemberUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  MemberUpdatedEventObject
>;

export type MemberUpdatedEventFilter = TypedEventFilter<MemberUpdatedEvent>;

export interface NullifierHashAddedEventObject {
  nullifierHash: BigNumber;
}
export type NullifierHashAddedEvent = TypedEvent<
  [BigNumber],
  NullifierHashAddedEventObject
>;

export type NullifierHashAddedEventFilter =
  TypedEventFilter<NullifierHashAddedEvent>;

export interface SemaphoreWhistleblowing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SemaphoreWhistleblowingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getLatestNeighborEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[EdgeStructOutput[]]>;

    getMaxEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateEdge(
      entityId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BigNumberish>,
      leafIndex: PromiseOrValue<BigNumberish>,
      typedChainId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRoots(
      groupId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addWhistleblower(
    entityId: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createEntity(
    entityId: PromiseOrValue<BigNumberish>,
    merkleTreeDepth: PromiseOrValue<BigNumberish>,
    editor: PromiseOrValue<string>,
    maxEdges: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getLatestNeighborEdges(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<EdgeStructOutput[]>;

  getMaxEdges(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  getMerkleTreeDepth(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMerkleTreeRoot(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfMerkleTreeLeaves(
    groupId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  publishLeak(
    leak: PromiseOrValue<BytesLike>,
    nullifierHash: PromiseOrValue<BigNumberish>,
    entityId: PromiseOrValue<BigNumberish>,
    roots: PromiseOrValue<BytesLike>,
    proof: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWhistleblower(
    entityId: PromiseOrValue<BigNumberish>,
    identityCommitment: PromiseOrValue<BigNumberish>,
    proofSiblings: PromiseOrValue<BigNumberish>[],
    proofPathIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateEdge(
    entityId: PromiseOrValue<BigNumberish>,
    root: PromiseOrValue<BigNumberish>,
    leafIndex: PromiseOrValue<BigNumberish>,
    typedChainId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRoots(
    groupId: PromiseOrValue<BigNumberish>,
    roots: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getLatestNeighborEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<EdgeStructOutput[]>;

    getMaxEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateEdge(
      entityId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BigNumberish>,
      leafIndex: PromiseOrValue<BigNumberish>,
      typedChainId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyRoots(
      groupId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "EntityCreated(uint256,address)"(
      entityId?: null,
      editor?: PromiseOrValue<string> | null
    ): EntityCreatedEventFilter;
    EntityCreated(
      entityId?: null,
      editor?: PromiseOrValue<string> | null
    ): EntityCreatedEventFilter;

    "GroupCreated(uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      merkleTreeDepth?: null,
      merkleTreeRoot?: null
    ): GroupCreatedEventFilter;
    GroupCreated(
      groupId?: PromiseOrValue<BigNumberish> | null,
      merkleTreeDepth?: null,
      merkleTreeRoot?: null
    ): GroupCreatedEventFilter;

    "LeakPublished(uint256,bytes32)"(
      entityId?: PromiseOrValue<BigNumberish> | null,
      leak?: null
    ): LeakPublishedEventFilter;
    LeakPublished(
      entityId?: PromiseOrValue<BigNumberish> | null,
      leak?: null
    ): LeakPublishedEventFilter;

    "MemberAdded(uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberAddedEventFilter;
    MemberAdded(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberAddedEventFilter;

    "MemberRemoved(uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberRemovedEventFilter;
    MemberRemoved(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberRemovedEventFilter;

    "MemberUpdated(uint256,uint256,uint256,uint256,uint256)"(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      newIdentityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberUpdatedEventFilter;
    MemberUpdated(
      groupId?: PromiseOrValue<BigNumberish> | null,
      index?: null,
      identityCommitment?: null,
      newIdentityCommitment?: null,
      merkleTreeRoot?: null
    ): MemberUpdatedEventFilter;

    "NullifierHashAdded(uint256)"(
      nullifierHash?: null
    ): NullifierHashAddedEventFilter;
    NullifierHashAdded(nullifierHash?: null): NullifierHashAddedEventFilter;
  };

  estimateGas: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getLatestNeighborEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateEdge(
      entityId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BigNumberish>,
      leafIndex: PromiseOrValue<BigNumberish>,
      typedChainId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRoots(
      groupId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createEntity(
      entityId: PromiseOrValue<BigNumberish>,
      merkleTreeDepth: PromiseOrValue<BigNumberish>,
      editor: PromiseOrValue<string>,
      maxEdges: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getLatestNeighborEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxEdges(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleTreeDepth(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleTreeRoot(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfMerkleTreeLeaves(
      groupId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishLeak(
      leak: PromiseOrValue<BytesLike>,
      nullifierHash: PromiseOrValue<BigNumberish>,
      entityId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      proof: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWhistleblower(
      entityId: PromiseOrValue<BigNumberish>,
      identityCommitment: PromiseOrValue<BigNumberish>,
      proofSiblings: PromiseOrValue<BigNumberish>[],
      proofPathIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateEdge(
      entityId: PromiseOrValue<BigNumberish>,
      root: PromiseOrValue<BigNumberish>,
      leafIndex: PromiseOrValue<BigNumberish>,
      typedChainId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRoots(
      groupId: PromiseOrValue<BigNumberish>,
      roots: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
